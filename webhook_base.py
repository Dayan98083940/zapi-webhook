from flask import Flask, request, jsonify
import os
import json
import openai
from datetime import datetime

app = Flask(__name__)

# === CONFIGURA√á√ïES ===
openai.api_key = os.getenv("OPENAI_API_KEY")
EXPECTED_CLIENT_TOKEN = os.getenv("CLIENT_TOKEN")
WEBHOOK_URL_TOKEN = os.getenv("WEBHOOK_TOKEN")

CONTATO_DIRETO = "+55(62)99808-3940"
CONTATO_FIXO = "(62) 3922-3940"
CONTATO_BACKUP = "(62) 99981-2069"
LINK_CALENDLY = "https://calendly.com/dayan-advgoias"

GRUPOS_BLOQUEADOS = ["sagrada fam√≠lia", "provid√™ncia santa"]
CONTATOS_PESSOAIS = ["pai", "mab", "jo√£o", "pedro", "amor", "√©rika", "felipe", "helder"]

# === SAUDA√á√ÉO POR HOR√ÅRIO ===
def gerar_saudacao():
    hora = datetime.now().hour
    if hora < 12:
        return "Bom dia"
    elif 12 <= hora < 18:
        return "Boa tarde"
    else:
        return "Boa noite"

# === FILTROS ===
def mensagem_√©_para_grupo(nome_remetente):
    return any(g in nome_remetente.lower() for g in GRUPOS_BLOQUEADOS)

def contato_excluido(nome):
    return any(p in nome.lower() for p in CONTATOS_PESSOAIS)

# === WEBHOOK PRINCIPAL ===
@app.route("/webhook/<token>/receive", methods=["POST"])
def receber_mensagem(token):
    if token != WEBHOOK_URL_TOKEN:
        return jsonify({"erro": "Token inv√°lido na URL."}), 403

    client_token = request.headers.get("Client-Token")
    content_type = request.headers.get("Content-Type")

    # NOVO BLOCO DE VALIDA√á√ÉO DE HEADERS
    if not client_token or not content_type:
        print("[ERRO] Headers ausentes ou incompletos.")
        return jsonify({"erro": "Headers ausentes."}), 403

    if client_token != EXPECTED_CLIENT_TOKEN or content_type != "application/json":
        print(f"[ERRO] Headers inv√°lidos. Token recebido: {client_token}")
        return jsonify({"erro": "Headers inv√°lidos."}), 403

    data = request.json
    try:
        mensagem = data.get("message", "").strip()
        numero = data.get("phone", "")
        nome = data.get("name", "")

        print(f"üì• Mensagem recebida de {numero} ({nome}): {mensagem}")

        resposta = gerar_resposta_gpt(mensagem, nome)
        print(f"üì§ Resposta enviada: {resposta}")
        return jsonify({"response": resposta})

    except Exception as e:
        print(f"‚ùå Erro ao processar mensagem: {repr(e)}")
        return jsonify({"erro": f"Erro interno: {str(e)}"}), 500

# === GPT-4 COM ESTILO DAYAN ===
def gerar_resposta_gpt(pergunta, nome_cliente):
    saudacao = gerar_saudacao()

    introducao = (
        f"{saudacao}, Sr(a). {nome_cliente}.\n\n"
        "Antes de te orientar com seguran√ßa, preciso entender melhor sua situa√ß√£o.\n"
        "üìå Pode me contar, de forma breve, o que est√° acontecendo ou qual √© sua d√∫vida?\n"
    )

    prompt = f"""
Voc√™ √© um assistente IA da Teixeira Brito Advogados.

Estilo da resposta:
- Formal, investigativo e direto.
- N√ÉO EXPLIQUE conceitos jur√≠dicos (ex: n√£o diga o que √© holding, como funciona usucapi√£o, etc.), mesmo que o cliente pergunte diretamente.
- Sua fun√ß√£o √© acolher, investigar e encaminhar o cliente para o atendimento humano.
- Use perguntas curtas e estrat√©gicas para entender a demanda.
- Nunca repita informa√ß√µes ou frases gen√©ricas como ‚Äúparece que voc√™ tem uma d√∫vida‚Äù.
- Responda em no m√°ximo 3 par√°grafos objetivos.
- Finalize sempre com:

üìå Ligue para: {CONTATO_DIRETO} ou agende: {LINK_CALENDLY}  
Se n√£o conseguir falar com o Dr. Dayan, entre em contato com o atendimento: {CONTATO_FIXO} ou {CONTATO_BACKUP}

Mensagem recebida do cliente:
{pergunta}
"""

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4
    )

    texto = response.choices[0].message["content"].strip()
    return f"{introducao}\n\n{texto}"

# === ROTA DE STATUS ===
@app.route("/")
def home():
    return "üü¢ Integra√ß√£o Whats TB ativa ‚Äî Estilo Dayan + valida√ß√£o de headers aplicada"
