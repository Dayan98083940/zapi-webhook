from flask import Flask, request, jsonify
import os
import json
import openai
from datetime import datetime
import re

app = Flask(__name__)

# === CONFIGURA√á√ïES ===
openai.api_key = os.getenv("OPENAI_API_KEY")
EXPECTED_CLIENT_TOKEN = os.getenv("CLIENT_TOKEN") or os.getenv("TOKEN_DA_INSTANCIA")
HORARIO_INICIO = 8
HORARIO_FIM = 18
DIAS_UTEIS = ["segunda", "ter√ßa", "quarta", "quinta", "sexta"]

# === CONTATOS EXCLU√çDOS ===
CONTATOS_PESSOAIS = ["pai", "mab", "jo√£o", "pedro", "amor", "√©rika", "helder", "felipe"]
GRUPOS_BLOQUEADOS = ["sagrada fam√≠lia", "provid√™ncia santa"]

# === DADOS DE CONTATO ===
CONTATO_DIRETO = "(62) 99981-2069"
CONTATO_FIXO = "(62) 3922-3940"
LINK_CALENDLY = "https://calendly.com/dayan-advgoias"
ARQUIVO_CONTROLE = "controle_interacoes.json"

# === PALAVRAS-CHAVE ESPECIAIS ===
PALAVRAS_CHAVE = {
    "invent√°rio": "Para invent√°rio, podemos dar andamento de forma r√°pida. Para isso, vou precisar de alguns documentos. Quer que eu envie a lista completa?",
    "contrato": "Qual contrato voc√™ precisa? Fale mais sobre o neg√≥cio jur√≠dico que deseja formalizar. Podemos preparar com toda seguran√ßa.",
    "div√≥rcio": "Se for consensual, conseguimos resolver rapidamente. Caso contr√°rio, analisamos o cen√°rio. Quer marcar um hor√°rio para orienta√ß√£o detalhada?",
    "renegocia√ß√£o de d√≠vidas": "Trabalhamos com renegocia√ß√£o de d√≠vidas banc√°rias e empresariais. Me conte um pouco da situa√ß√£o para podermos orientar melhor.",
    "atraso de obra": "Voc√™ est√° com problema em obra atrasada? Posso te ajudar a avaliar se cabe restitui√ß√£o ou a√ß√£o por descumprimento contratual.",
    "leil√£o": "Voc√™ est√° interessado em acompanhar um leil√£o ou deseja cancelar um? Podemos te orientar nos dois casos.",
    "holding": "Voc√™ deseja estruturar uma holding familiar ou rural? Podemos agendar um diagn√≥stico e organizar tudo com seguran√ßa jur√≠dica."
}

# === CARREGAR CONTROLE DE INTERA√á√ïES ===
def carregar_controle():
    if os.path.exists(ARQUIVO_CONTROLE):
        with open(ARQUIVO_CONTROLE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def salvar_controle(controle):
    with open(ARQUIVO_CONTROLE, "w", encoding="utf-8") as f:
        json.dump(controle, f, indent=2, ensure_ascii=False)

controle = carregar_controle()

# === CHECAR HOR√ÅRIO E GRUPO ===
def fora_do_horario():
    agora = datetime.now()
    dia_semana = agora.strftime("%A").lower()
    return dia_semana not in DIAS_UTEIS or not (HORARIO_INICIO <= agora.hour < HORARIO_FIM)

def mensagem_√©_para_grupo(nome_remetente):
    return any(g in nome_remetente.lower() for g in GRUPOS_BLOQUEADOS)

def contato_excluido(nome):
    return any(p in nome.lower() for p in CONTATOS_PESSOAIS)

# === ROTA PRINCIPAL DE RECEBIMENTO ===
@app.route("/webhook/<token>/receive", methods=["POST"])
def receber_mensagem(token):
    # Verifica√ß√£o de token via URL
    if token != os.getenv("WEBHOOK_URL_TOKEN"):
        return jsonify({"erro": "Token inv√°lido na URL."}), 403

    # Verifica√ß√£o de headers
    client_token = request.headers.get("Client-Token")
    content_type = request.headers.get("Content-Type")
    if client_token != EXPECTED_CLIENT_TOKEN or content_type != "application/json":
        return jsonify({"erro": "Headers inv√°lidos."}), 403

    data = request.json
    try:
        mensagem = data.get("message", "").strip().lower()
        numero = data.get("phone", "")
        nome = data.get("name", "")

        print(f"[{datetime.now()}] üì• Mensagem recebida de {numero} ({nome}): {mensagem}")

        if mensagem_√©_para_grupo(nome) or contato_excluido(nome):
            print("‚ùå Ignorado (grupo ou contato pessoal).")
            return jsonify({"status": "ignorado"})

        if fora_do_horario():
            resposta = f"Ol√°! Nosso atendimento √© de segunda a sexta, das 08h √†s 18h. Assim que poss√≠vel, retornaremos. Deseja agendar um hor√°rio comigo? {LINK_CALENDLY}"
        elif mensagem in PALAVRAS_CHAVE:
            resposta = PALAVRAS_CHAVE[mensagem]
        else:
            resposta = gerar_resposta_gpt(mensagem)

        print(f"üì§ Resposta enviada: {resposta}")
        return jsonify({"response": resposta})

    except Exception as e:
        print(f"‚ùå Erro ao processar mensagem: {e}")
        return jsonify({"erro": "Falha no processamento"}), 500

# === GERAR RESPOSTA COM GPT-4 ===
def gerar_resposta_gpt(pergunta):
    prompt = f"""
Voc√™ √© um assistente jur√≠dico do escrit√≥rio Teixeira.Brito Advogados, liderado por Dayan, especialista em contratos, sucess√µes, holding e renegocia√ß√£o de d√≠vidas.

Responda √† seguinte solicita√ß√£o com educa√ß√£o, seguran√ßa jur√≠dica, clareza e objetividade, no estilo Dayan.

Pergunta: {pergunta}

Se n√£o for poss√≠vel concluir com base nas informa√ß√µes fornecidas, oriente o cliente a agendar um atendimento pelo link: {LINK_CALENDLY} ou a falar diretamente no WhatsApp {CONTATO_DIRETO}.
    """

    resposta = openai.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.6
    )
    texto = resposta.choices[0].message.content.strip()
    texto += f"\n\nüìå Se preferir, fale direto com Dr. Dayan pelo WhatsApp {CONTATO_DIRETO} ou agende um hor√°rio: {LINK_CALENDLY}"
    return texto

# === ROTA DE TESTE ===
@app.route("/")
def home():
    return "Servidor ativo. Integra√ß√£o Z-API + GPT-4 rodando."
